# datasource MySql
spring.datasource.url=${DATASOURCE_URL:jdbc:mysql://localhost:3306/transacoes?createDatabaseIfNotExist=TRUE&useTimezone=true&serverTimezone=America/Sao_Paulo}
spring.datasource.username=${DATASOURCE_USER:root}
spring.datasource.password=${DATASOURCE_PASSWORD:Zup123456}
#spring.jpa.defer-datasource-initialization=true

# jpa MySql
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
# para controlar o timeout de execução padrão de queries
spring.jpa.properties.javax.persistence.query.timeout=${JPA_QUERY_TIMEOUT:50}
spring.jpa.hibernate.ddl-auto=${HIBERNATE_DLL_AUTO_URL:update}
spring.jpa.properties.hibernate.show_sql=${HIBERNATE_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=${HIBERNATE_FORMAT_SQL:true}
#spring.jpa.show-sql: true


########################################################################################################################
# Consumer properties
spring.kafka.bootstrap-servers=${KAFKA_HOST:localhost:9092}

# Formato da chave (String) recebida!
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Formato da mensagem \ evento (JSON) recebida(o)!
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:app-transacao}

# Modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:earliest}

spring.kafka.topic.transactions=${KAFKA_TIPOC-TRANSACTIONS:transacoes}


########################################################################################################################
# Chave para criptografar os dados de Documento e Cartão no Banco de dados
encryption.key=${ENCRYPTION_KEY:(4D6Z.qGUWofWm}PxgOhdkQPuA|Y[r!9}